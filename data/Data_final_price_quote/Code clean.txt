library(e1071)
library(xlsx)
library(xts)
library(zoo)
library(mice)
library(stringi)
library(lubridate)
library(quantmod)
library(PerformanceAnalytics)
library(fBasics)
if(!require(moments)) { install.packages("moments"); require("moments")}

setwd('C:/Users/soufiane/Desktop/Data_final')
### list all files in the working directory 
file.list<- list.files(pattern='*xls')
HQ.data= matrix(0,nrow=length(file.list),ncol=1)
for (l in 1:length(file.list)){
	DF=read.xlsx(file.list[l],header=TRUE, sheetIndex=1) # read spreadsheet
	company.name=paste(sub("*...Price.History.*", "", colnames(DF)[1]),"RET")
	NN=which(DF[,1] == "Exchange Date")
	Drops<-paste(1:NN-1)
	DF=DF[!(rownames(DF) %in% Drops), ]
	colnames(DF) <- as.character(unlist(DF[1,]))
	DF<-DF[-1,]
	Drops<-NA
	DF=DF[,!(colnames(DF) %in% Drops)]
	DFF=c(rep(1,nrow(DF)))
	for (i in 1:nrow(DF)){
		DFF[i]<-as.character(as.Date(as.numeric(as.character(DF[i,1])), origin="1899-12-30"))
		}
	DF$Date=DFF
	Rowsrequired=c("Date","Turnover","Approx VWAP","O-C","H-L","%CVol","%CTurn","Net","%Chg","Volume","Open","Low","High","Close")	
	DF=DF[,Rowsrequired]
	for (i in 2:ncol(DF)){
		DF[,i]<-as.numeric(as.character(DF[,i]))
		}
	DFxts <- xts(DF[,-1], order.by=as.Date(DF[,1], "%Y-%m-%d"))
	HQ.data[l,]=company.name
	assign(HQ.data[l,],DFxts)
}


setwd('C:/Users/soufiane/Desktop/Data_final_metrics')
### list all files in the working directory 
file.list<- list.files(pattern='*xls')
Metrics.data= matrix(0,nrow=length(file.list),ncol=1)
Metrics.data.2000.2017= matrix(0,nrow=length(file.list),ncol=1)
for (l in 1:length(file.list)){
	DF=read.xlsx(file.list[l],header=TRUE, sheetIndex=1) # read spreadsheet
	company.name=paste(sub("*...Ratios.*", "", colnames(DF)[1]),"METRICS")
	Drops<-c("1","2")
	DF=DF[!(rownames(DF) %in% Drops), ]
	for (i in 1:ncol(DF)){
		DF[,i]<-as.character(DF[,i])
		}
	rownames(DF) <- c("Ratios",as.character(unlist(DF[-1,1])))
	colnames(DF) <- as.character(unlist(DF[1,]))
	Drops<-c(NA,"Industry Median","Ratios")
	DF=DF[,!(colnames(DF) %in% Drops)]
	DF=DF[!(rownames(DF) %in% Drops),]
	Rowsrequired=c("Earnings Quality Score","Gross Margin","EBITDA Margin","Operating Margin","Pretax Margin",
	"Effective Tax Rate","Net Margin","Asset Turnover","Pretax ROA","x Leverage (Assets/Equity)",
	"Pretax ROE","x Tax Complement","ROE","x Earnings Retention","Reinvestment Rate","Quick Ratio","Current Ratio",
	"Times Interest Earned","Cash Cycle (Days)","Debt/Equity","% LT Debt to Total Capital","(Total Debt - Cash) / EBITDA")	
	DF=DF[Rowsrequired,]
	Rowsrequired2=c("Earnings Quality Score","Gross Margin","EBITDA Margin","Operating Margin","Pretax Margin",
	"Effective Tax Rate","Net Margin","Asset Turnover","Pretax ROA","Leverage (Assets/Equity)",
	"Pretax ROE","Tax Complement","ROE","Earnings Retention","Reinvestment Rate","Quick Ratio","Current Ratio",
	"Times Interest Earned","Cash Cycle (Days)","Debt/Equity","% LT Debt to Total Capital","(Total Debt - Cash) / EBITDA")	
	rownames(DF) <- Rowsrequired2
	DF[DF=="-"] <- NA
	DF[DF=="N/A"] <- NA
	DF=as.data.frame(DF)
	for (i in 1:ncol(DF)){
		DF[,i]<-as.numeric(as.character(DF[,i]))
		}
	DF=t(DF)
	Metrics.data[l,]=company.name
	assign(Metrics.data[l,],DF)
}
Metrics.data <- Metrics.data[ order(Metrics.data[,1]), ]

### Keep only the data from 2000-2017
for (l in 1:length(Metrics.data)){	  
	DF=get(Metrics.data[l])
	Drops<-paste(1900:1999)
	DF=DF[!(rownames(DF) %in% Drops), ]
	assign(Metrics.data[l],DF)
	}


###Check for missing companies in RET data
NAcompRET=""
for (i in 1:(length(HQ.data))) {
	Tester=sub("* RET*", "", HQ.data[i])
	Cond=FALSE
	for (j in 1:(length(Metrics.data))){
	if (sapply(Tester, grepl, Metrics.data[j])==TRUE){
	Cond=TRUE
	}
	}
	if (Cond==FALSE){
	NAcompRET=c(NAcompRET,HQ.data[i])
	}
	}
###Check for missing companies in METRICS data
NAcompMETRICS=""
for (i in 1:(length(Metrics.data))) {
	Tester=sub("* METRICS*", "", Metrics.data[i])
	Cond=FALSE
	for (j in 1:(length(HQ.data))){
	if (sapply(Tester, grepl, HQ.data[j])==TRUE){
	Cond=TRUE
	}
	}
	if (Cond==FALSE){
	NAcompMETRICS=c(NAcompMETRICS,Metrics.data[i])
	}
	}
	
HQ.data=HQ.data[!(HQ.data %in% NAcompRET[-1])]
Metrics.data=Metrics.data[!(Metrics.data %in% NAcompMETRICS[-1])]
### recheck vice versa order
Metrics.data <- Metrics.data[ order(Metrics.data)]
HQ.data <- HQ.data[ order(HQ.data)]
for (i in 1:(length(Metrics.data))) {
	Tester=sub("* METRICS*", "", Metrics.data[i])
	print(sapply(Tester, grepl, HQ.data[i]))
	}

### Risk free rate
RFR=read.xlsx('C:/Users/soufiane/Desktop/US10Y.xlsx',header=TRUE, sheetIndex=1) # read spreadsheet
keeps<-c("Date","Price")
RFR=RFR[,keeps]
RFR$Date<- mdy(RFR$Date)
RFRxts <- xts(RFR[,-1], order.by=as.Date(RFR[,1], "%Y-%m-%d"))


### Benchmarking rate
BR=read.xlsx('C:/Users/soufiane/Desktop/SP500.xlsx',header=TRUE, sheetIndex=1) # read spreadsheet
keeps<-c("Date","Close")
BR=BR[,keeps]
BRxts <- xts(BR[,-1], order.by=as.Date(BR[,1], "%Y-%m-%d"))

####create yearly database of monthlyReturn  
Monthly.return.data.2000.2017= matrix(0,nrow=(2017-2000+1),ncol=1)
rownames(Monthly.return.data.2000.2017)=paste(2000:2017)
Monthly.return.data.2000.2017[,1]=paste("MRET_",2000:2017)

for (k in 1:nrow(Monthly.return.data.2000.2017)){
	if (rownames(Monthly.return.data.2000.2017)[k]==2000) {
	Monthly.return.data.template= matrix(0,nrow=length(HQ.data),ncol=15)
	rownames(Monthly.return.data.template)=HQ.data
	colnames(Monthly.return.data.template)=c('02','03','04','05','06','07','08','09','10','11','12','Mean','Variance','Skewness','Kurtosis')
	} else {
	Monthly.return.data.template= matrix(0,nrow=length(HQ.data),ncol=16)
	rownames(Monthly.return.data.template)=HQ.data
	colnames(Monthly.return.data.template)=c('01','02','03','04','05','06','07','08','09','10','11','12','Mean','Variance','Skewness','Kurtosis')
	}
	for (j in 1:nrow(Monthly.return.data.template)) {
		DS=get(rownames(Monthly.return.data.template)[j])
		DS=DS[,"Close"]
		DSmonthlyReturn<-monthlyReturn(DS)
		for (i in 1:(ncol(Monthly.return.data.template)-4)){
			Cond=paste0(rownames(Monthly.return.data.2000.2017)[k],colnames(Monthly.return.data.template)[i])
			if (is.null(DSmonthlyReturn[Cond,which.i=TRUE])==FALSE){
			Monthly.return.data.template[j,i]=DSmonthlyReturn[Cond]
			}else{Monthly.return.data.template[j,i]=NA}
			}
			
			Cond.year=rownames(Monthly.return.data.2000.2017)[k]
			if (is.null(DSmonthlyReturn[Cond.year,which.i=TRUE])==FALSE){
			Monthly.return.data.template[j,'Mean']=mean(DSmonthlyReturn[Cond.year], na.rm = TRUE)
			Monthly.return.data.template[j,'Variance']=var(DSmonthlyReturn[Cond.year], na.rm = TRUE)
			Monthly.return.data.template[j,'Skewness']=skewness(DSmonthlyReturn[Cond.year], na.rm = TRUE)
			Monthly.return.data.template[j,'Kurtosis']=kurtosis(DSmonthlyReturn[Cond.year], na.rm = TRUE)
			}else{
			Monthly.return.data.template[j,'Mean']=NA
			Monthly.return.data.template[j,'Variance']=NA
			Monthly.return.data.template[j,'Skewness']=NA
			Monthly.return.data.template[j,'Kurtosis']=NA
			}
		}
	
	assign(Monthly.return.data.2000.2017[k,1],Monthly.return.data.template)
	}

#### create a dataset of METRICS
METRICS.data.2000.2017= matrix(0,nrow=(2017-2000+1),ncol=1)
rownames(METRICS.data.2000.2017)=paste(2000:2017)
METRICS.data.2000.2017[,1]=paste("METRICS_",2000:2017)
METRICS.data.template= matrix(NA,nrow=length(Metrics.data),ncol=ncol(get(Metrics.data[1])))
rownames(METRICS.data.template)=Metrics.data
colnames(METRICS.data.template)=colnames(get(Metrics.data[1]))

for (k in 1:nrow(METRICS.data.2000.2017)){
	for (j in 1:nrow(METRICS.data.template)) {
		DS=get(rownames(METRICS.data.template)[j])
		for (i in 1:nrow(DS)){
			Cond=isTRUE(rownames(DS)[i]==rownames(METRICS.data.2000.2017)[k])
			if (Cond==TRUE) {
			METRICS.data.template[j,]=DS[i,]
			} 
			
			}
			
		}
	assign(METRICS.data.2000.2017[k,1],METRICS.data.template)
	}

### Consolidate final database
Final.consolidated.data.2000.2017= matrix(0,nrow=(2017-2000+1),ncol=1)
rownames(Final.consolidated.data.2000.2017)=paste(2000:2017)
Final.consolidated.data.2000.2017[,1]=paste("MRET_METRICS_",2000:2017)
for (l in 1:length(Final.consolidated.data.2000.2017)){	 
assign(Final.consolidated.data.2000.2017[l,1],cbind(get(Monthly.return.data.2000.2017[l,]),get(METRICS.data.2000.2017[l,])))
}

##### Simulation data
Simnumb=1000
Nport=20
Simulated.Portfolio= matrix(0,nrow=Simnumb,ncol=1)
rownames(Simulated.Portfolio)=paste("Portfolio_",1:Simnumb)
colnames(Simulated.Portfolio)="Sharpe.Ratio"
Drop=NA
TR=get(Final.consolidated.data.2000.2017[17])
for (h in 1:12){
TR=TR[!(TR[,h] %in% Drop), ]
}
year.performance='2016'
for (i in 1:Simnumb) {
Portoflio_Companies=""
selected<-sample(1:nrow(TR), 20, replace=F)
for (j in 1:Nport){
Num=selected[j]
Portoflio_Companies=c(Portoflio_Companies,rownames(TR)[Num])
}
Portfolio.selected<-TR[Portoflio_Companies[-1],]

Portfolio.performance<-list()
for (k in 1:nrow(Portfolio.selected)) {
Portfolio.performance[[k]]<-monthlyReturn(get(rownames(Portfolio.selected)[k])[,'Close'])[year.performance]
}
Portfolio.performance<-data.frame(Portfolio.performance)
colnames(Portfolio.performance)=rownames(Portfolio.selected)
Portfolio.performance.Return=Return.portfolio(Portfolio.performance)
RFRmonthly=monthlyReturn(RFRxts)[year.performance]
Simulated.Portfolio[i,1]=SharpeRatio.annualized(Portfolio.performance.Return, Rf =RFRmonthly, scale = 12, geometric = TRUE)

assign(rownames(Simulated.Portfolio)[i],Portfolio.selected)
}



###Class generation
rangeSim=max(Simulated.Portfolio)-min(Simulated.Portfolio)
Quality.Class= matrix(0,nrow=nrow(Simulated.Portfolio),ncol=1)
colnames(Quality.Class)="Quality.Class"
for (g in 1:nrow(Simulated.Portfolio)){
	if (Simulated.Portfolio[g,]<(min(Simulated.Portfolio)+0.25*rangeSim)){
	Quality.Class[g,]=1
	} else if (Simulated.Portfolio[g,]<(min(Simulated.Portfolio)+0.5*rangeSim)){
	Quality.Class[g,]=2
	} else if (Simulated.Portfolio[g,]<(min(Simulated.Portfolio)+0.75*rangeSim)){
	Quality.Class[g,]=3
	} else { Quality.Class[g,]=4}
}
Simulated.Portfolio=cbind(Simulated.Portfolio,Quality.Class)

### database merger
Portfolio.database<-matrix(0,nrow=1,ncol=ncol(get(rownames(Simulated.Portfolio)[1])))
colnames(Portfolio.database)=colnames(get(rownames(Simulated.Portfolio)[1]))
for (d in 1:nrow(Simulated.Portfolio)){
Portfolio.database=rbind(Portfolio.database,get(rownames(Simulated.Portfolio)[d]))
}
Portfolio.database=Portfolio.database[-1,]

write.table(Portfolio.database, file = 'C:/Users/soufiane/Desktop/trial1.csv',row.names=TRUE, na="",col.names=TRUE, sep=",")
write.table(Simulated.Portfolio, file = 'C:/Users/soufiane/Desktop/Classes.csv',row.names=TRUE, na="",col.names=TRUE, sep=",")














